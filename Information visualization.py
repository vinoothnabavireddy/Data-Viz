# -*- coding: utf-8 -*-
"""Lab 3-vinnub

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bLYI9jT8phEjArB-CRTLNwlh4xtEg1dZ

# Information Visualization Altair Demo 2
School of Information, University of Michigan


## Plan
1. Layering 
2. Transform/Filter/Aggregate
3. Melt 
4. Pivot 

## Resources 
*  [Transform documentation](https://altair-viz.github.io/user_guide/transform.html)
*  [UW course examples](https://github.com/uwdata/visualization-curriculum/blob/master/altair_data_transformation.ipynb)
* [Reshapingg documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/reshaping.html)

## Step 0: Import
"""

# imports we will use
import altair as alt
import pandas as pd
from vega_datasets import data as vega_data
movies_url = vega_data.movies.url
movies = pd.read_json(movies_url)

movies.sample(2)

"""## Step 1: Warmup and Layering

Last week, we covered the basic of grammar of graphics. To create a chart, we need to specify the 

1.   Mark: e.g., point, rect, bar
2.   Data: i.e., variables and types
3.   Encoding: e.g., x, y, color

Warm up exercise: 

 ![1.1](https://github.com/LiciaHe/SI649/blob/master/week3/demo/img/1.1.png?raw=true)
"""

#1.1 Exercise: basic bar chart for Major_Genre and avg of Production Budget 
alt.Chart(movies).mark_bar().encode(
    x= alt.X("mean(Production_Budget):Q"),
    y=alt.Y("Major_Genre:N")
)

"""We can stitch multiple charts together by making a [compound chart](https://altair-viz.github.io/user_guide/compound_charts.html). Specifically, we discussed **horizontal concatenation** (hconcat or |) and **vertical concatenation** (vconcat or & )

Warmup #2 

![1.2](https://github.com/LiciaHe/SI649/blob/master/week3/demo/img/1.2.png?raw=true)
"""

#1.2 Exercise 2: average vs median 
# basic bar chart for Major_Genre and avg of Production Budget 
# basic bar chart for Major_Genre and median of Production Budget 
# put them side by side 

bar1= alt.Chart(movies).mark_bar().encode(
    x= alt.X("mean(Production_Budget):Q"),
    y=alt.Y("Major_Genre:N")
)
bar2= alt.Chart(movies).mark_bar().encode(
    x= alt.X("median(Production_Budget):Q"),
    y=alt.Y("Major_Genre:N")
)

bar1 |bar2

"""You can also build more sophisticated visualizations by combining charts both horizontally and vertically. For example, this next plot is known as a scatterplot with marginal historgrams. In the middle we are looking at the correlation between Rotten Tomatoes and IMDB scores. On the top and right we see the distributions of each variable separately. In this case we see a weak correlation and also note the IMDB rating has a nice normal distribution but the Rotten tomatoes scores seem more uniform."""

# 1.3 

# # scatter plot for the middle
points = alt.Chart(movies).mark_point(filled=True,size=90).encode(
    x=alt.X('IMDB_Rating'),
    y=alt.Y('Rotten_Tomatoes_Rating')
)

# the histogram to put on the right side (notice we remove the axes)
distribright= alt.Chart(movies).mark_bar().encode(
    y = alt.Y('Rotten_Tomatoes_Rating',bin=alt.BinParams(maxbins=20),axis=None),
    x = alt.X('count()',axis=None),
).properties(width=30)

# the histogram to put on the top (notice we remove the axes)
distribtop = alt.Chart(movies).mark_bar().encode(
    x = alt.X('IMDB_Rating',bin=alt.BinParams(maxbins=20),axis=None),
    y = alt.Y('count()',axis=None),
).properties(height=30)

# put the scatter and right together side by side and then put those
# under the top histogram
distribtop & (points | distribright)

"""[Layering](https://altair-viz.github.io/user_guide/compound_charts.html#layered-charts) is a very useful compounding method that allows you to overlay two different charts on the same set of axes. You can layer charts using the "+" operator."""

#1.4 copy 1.2, change median to a line 
chart1=alt.Chart(movies).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('average(Production_Budget):Q')
)
chart2=alt.Chart(movies).mark_line(color="orange").encode(
    alt.Y('Major_Genre:N'),
    alt.X('median(Production_Budget):Q')
)
chart1 + chart2

"""Layering is also commonly used to add text annotations."""

#1.4 layering text 
#dx is the distance you want to place it.
text_annotation_for_mean=chart1.mark_text(align='left',dx =10).encode(
    text=alt.Text("mean(Production_Budget)",formatType="number",format="$s")
)
chart1 + text_annotation_for_mean

"""## Step 2: Type of Transformation
Altair provides 13 different types of transformations. These will allow you to perform basic manipulation of the data without having to use some external tool like Pandas. Although Pandas may be more powerful, the advantage of doing transformations directly in Altair/Vega-Lite is you will be able to deploy your code without needing Python (just Vega-Lite).


| Transform                | Description                                                                     |
|--------------------------|---------------------------------------------------------------------------------|
| Aggregate Transforms     | Create a new data column by aggregating an existing column.                     |
| Bin transforms           | Create a new data column by binning an existing column.                         |
| Calculate Transform      | Create a new data column using an arithmetic calculation on an existing column. |
| Filter Transform         | Select a subset of data based on a condition.                                   |
| Flatten Transform        | Flatten array data into columns.                                                |
| Fold Transform           | Convert wide-form data into long-form data.                                     |
| Impute Transform         | Impute missing data.                                                            |
| Join Aggregate Transform | Aggregate transform joined to original data.                                    |
| Lookup Transform         | One-sided join of two datasets based on a lookup key.                           |
| Sample Transform         | Random sub-sample of the rows in the dataset.                                   |
| Stack Transform          | Compute stacked version of values.                                              |
| TimeUnit Transform       | Discretize/group a date by a time unit (day, month, year, etc.)                 |
| Window Transform         | Compute a windowed aggregation                                                  |

### 2.1 Aggregate and join aggregate
In last class, we covered [aggregate transformation](https://altair-viz.github.io/user_guide/transform.html#aggregate-transforms). For example, using mean, max, min, sum to compute aggregate summary statistics over groups of data. .
"""

#2.1.1 copy of 1.1 

alt.Chart(movies).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('average(Production_Budget):Q')
)

"""You can also use the longer form to plot the same chart"""

#2.1.2 copy 2.1.1 and adjust to longer form 

alt.Chart(movies).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X(field="Production_Budget",aggregate="mean",type="quantitative")
)

"""The same chart could be made with an explicit computted aggregation."""

#2.1.3 copy 2.1.2 and change to transform_aggregate 

alt.Chart(movies).transform_aggregate(
    mean_production_budget='mean(Production_Budget)',groupby=['Major_Genre']).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('mean_production_budget:Q')
)

"""If you create an aggregated variable and didn't use it, what will happen?"""

#2.1.4 , copy 2.1.3 aggregate without usg 
#original data is impacted, the mean_production_budget is not available for other 
#transformation, such as filter 

alt.Chart(movies).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('mean_production_budget:Q') 
).transform_aggregate(
    mean_production_budget='mean(Production_Budget)', 
    groupby=['Major_Genre']
)

"""#### Aggregate vs. JoinAggregate
Let's take a look at this mini example 


| Title | Major_Genre | Production_Budget |
|-------|-------|-------|
| A     | x     | 1     |
| B     | x     | 2     |
| C     | y     | 10    |

transform_aggregate will **change the original data structure** and group rows together. 

e.g. running the following transformation 
``` 
.transform_aggregate(
    mean_production_budget='mean(Production_Budget)', 
    groupby=['Major_Genre']
) 
```
will create a table like this 

| Major_Genre | mean_production_budget |
|-------|------------------------|
| x     | 1.5                    |
| y     | 10                     |

If we want to **preserve the original data structure**, we will use joinAggregate. 

e.g. running the following transformation 
``` 
.transform_joinaggregate(
    mean_production_budget='mean(Production_Budget)', 
    groupby=['Major_Genre']
) 
```

will generate the following table 

| Title | Major_Genre | Value | mean_production_budget |
|-------|-------|-------|------------------------|
| A     | x     | 1     | 1.5                    |
| B     | x     | 2     | 1.5                    |
| C     | y     | 10    | 10                     |
"""

#2.1.5 copy 2.1.4 use join aggregation (join aggregate doesn't change your dataset)
alt.Chart(movies).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('Production_Budget:Q') 
).transform_joinaggregate(
    mean_production_budget='mean(Production_Budget)', 
    groupby=['Major_Genre']
)

"""### 2.2 Bin Transformation 
We discussed the [bin transformation](https://altair-viz.github.io/user_guide/transform.html#bin-transforms), replicate the following visualization: 

2.2.1 ![2.2.1](https://github.com/LiciaHe/SI649/blob/master/week3/demo/img/2.2.1.png?raw=true)
"""

#2.2.1, EXERCISE barchart with binned IMDB_rating and mean Production_Budget
alt.Chart(movies).mark_bar().encode(
    alt.X('IMDB_Rating:Q',bin=True),
    alt.Y('mean(Production_Budget)')

)

"""### 2.3 Calculate Transform 
The [calculate transform ](https://altair-viz.github.io/user_guide/transform.html#calculate-transform)allows the user to define new fields in the dataset which are calculated from other fields using an expression syntax.

For example, we want to have a column called "**Revenue**" that's equal to the difference between Worldwide_Gross and Production_Budget
"""

#2.3.1 Revenue vs Major_Genre
alt.Chart(movies).transform_calculate(
    Revenue='datum.Worldwide_Gross-datum.Production_Budget'
).mark_point().encode(
    alt.X("Major_Genre:N"),
    alt.Y("Revenue:Q")
)

"""You can chain multiple transformations together. Make a bar chart for mean revenue and major_genre

 2.3.2 ![2.3.2](https://github.com/LiciaHe/SI649/blob/master/week3/demo/img/2.3.2.png?raw=true)
"""

#2.3.2 Exercise: bar chart for mean revenue and major_genre 
alt.Chart(movies).transform_calculate(
    Revenue='datum.Worldwide_Gross-datum.Production_Budget'
).transform_aggregate(
    mean_revenue='mean(Revenue)',
    groupby = ['Major_Genre']).mark_bar().encode(
    alt.Y("Major_Genre:N"),
    alt.X("mean_revenue:Q")
)

"""### 2.4 Filter Transform 
The[ filter transform ](https://altair-viz.github.io/user_guide/transform.html#filter-transform)removes objects from a data stream based on a provided filter expression, selection, or other filter predicate.

There are multiple ways of specifying filters. The first way is using a Vega expression.
"""

#2.4.1 alt.datum: & for and, | of or, > < = !=  or do alt.datum.IMDB_Votes
alt.Chart(movies).transform_filter(
    "datum.IMDB_Votes>=500"& (alt.datum.IMDB_Rating>5)).mark_bar().encode(
    alt.X("IMDB_Rating:Q"),
    alt.Y("mean(Production_Budget)")
)

"""You can also make the same chart using **Field Predicates**. Field predicates overlap somewhat in function with expression predicates, but have the advantage that their contents are validated by the schema. Examples are:"""

#2.4.2 using predicates: equal, lt, gt, lte, gte 
alt.Chart(movies).transform_filter(
    #"datum.IMDB_Votes>=500"& (alt.datum.IMDB_Rating>5)
    alt.FieldGTEPredicate(field="IMDB_Votes",gte=500)).transform_filter(
    #"datum.IMDB_Votes>=500"& (alt.datum.IMDB_Rating>5)
    alt.FieldGTPredicate(field="IMDB_Rating",gt=5)).mark_bar().encode(
    alt.X("IMDB_Rating:Q"),
    alt.Y("mean(Production_Budget)")
)

"""Here are 2 very useful field predicates: 
* **FieldOneOfPredicate** evaluates whether a field is among a list of specified values.
* **FieldRangePredicate** evaluates whether a continuous field is within a range of values.
"""

# 2.4.3 oneOf and Range:  
# include only Drama and Comedy movies that have ratings between 5 and 7.

"""instead of !, &  and |, you can also use [logical operands](https://altair-viz.github.io/user_guide/transform.html#logical-operands)"""

#2.4.4 copy 2.4.3, use logical operands

"""2.4.5 Exercise: combine aggregate and filter 

![2.4.5](https://github.com/LiciaHe/SI649/blob/master/week3/demo/img/2.4.5.png?raw=true)

* Exercise: Plot a bar chart with Genre and their mean budget 
* display a genre if its means budget is higher than the mean budget across all genres. 

Hint: 
* Do you want to use aggregate or joinaggregate? 
* What's your filtering logic?
"""

#2.4.5: Exercise: filter and aggregate  
# Plot a bar chart with Genre and mean budget 
# display a genre if its means budget is higher than the mean budget across
#   all genres. 
alt.Chart(movies).transform_joinaggregate(
    mean_budget_all='mean(Production_Budget)', 
).transform_joinaggregate(
    mean_budget_genre='mean(Production_Budget)', 
    groupby=['Major_Genre']
).transform_filter(
    alt.datum.mean_budget_genre> alt.datum.mean_budget_all
).mark_bar().encode(
    alt.Y('Major_Genre:N'),
    alt.X('mean_budget_genre:Q') 
)

"""### 2.4.6 Sample Transform 
[Sample Transform ](https://altair-viz.github.io/user_guide/transform.html#sample-transform)lets you specify a number of rows to randomly choose from the dataset.
"""

#2.4.6 SAMPLE, run the following code  

alt.Chart(movies).mark_bar().encode(
    alt.X('IMDB_Rating:Q'),
    alt.Y('Title:N')
).transform_sample(10)

"""### 2.4.7 Window Transformation 
[window transformation](https://altair-viz.github.io/user_guide/transform.html#window-transform) calculates over sorted groups of data objects. These calculations include ranking, lead/lag analysis, and aggregates such as cumulative sums and averages.
"""

#2.4.7: copy 2.4.6 and produce rank  

# alt.Chart(movies).mark_bar().encode(
#     alt.X('IMDB_Rating:Q'),
#     alt.Y('Title:N')
# ).transform_sample(10)

"""# 3. Long versus Wide Data

There are two common conventions for storing data in a dataframe, sometimes called long-form and wide-form. Both are sensible patterns for storing data in a tabular format; briefly, the difference is this:
* wide-form data has one row per independent variable, with metadata recorded in the row and column labels.,for example: 

| item | key A | key B |
|-------|-------|-------|
| 1     | 2     | 6     |
| 2     | 4     | 8     |




* long-form data has one row per observation, with metadata recorded within the table as values. For example: 


| item | keys  | key B |
|-------|-------|-------|
| 1     | key A | 2     |
| 1     | key A | 6     |
| 2     | key B | 4     |
| 2     | key B | 8     |
"""

#3.1 focus on US_Gross and Ww_Gross
movies_wide=movies.loc[:,["Title","US_Gross","Worldwide_Gross"]].iloc[:10,:]
movies_wide

"""It's hard to make a stacked bar from here."""

#3.2 make stacked bar chart 

#make US bar chart
c1 = alt.Chart(movies_wide).mark_bar().encode(
    x = alt.Y('Title:N'),
    y = alt.X('US_Gross:Q')
)

#make International bar chart
c2= alt.Chart(
    movies_wide
    ).transform_calculate(
        gross_sum='datum.US_Gross+datum.Worldwide_Gross'
    ).mark_bar(
    color="orange",
    opacity=0.5
    ).encode(
    x = alt.Y('Title:N'),
    y = alt.X('gross_sum:Q')
)
    
#layering them together 
c1+c2

"""The problem is that with more classes of data this layering becomes tedious. We also don't get quite the right colors because the two charts don't know what the other has picked. Thus, depending on the task we may need to switch from the "wide" format to the "long" format (see [more here](https://altair-viz.github.io/user_guide/data.html#long-form-vs-wide-form-data)). 

To get the data back into the long form, we'll use the pandas operation [melt](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.melt.html).
"""

#3.3 melt 

movies_long=movies_wide.melt('Title', var_name='Gross', value_name='dollars')
movies_long

"""Here's the stacked bar chart in one short command"""

# 3.4 make stacked bar chart
#make US bar chart
c1 = alt.Chart(movies_long).mark_bar().encode(
    y = alt.Y('Title:N'),
    x = alt.X('dollars:Q'),
    color=alt.Color("Gross:N")
)
c1

"""Altair's **fold transformation** lets you quickly change between long and wide forms.

Using fold to convert wide to long
"""

#3.5 fold 
alt.Chart(movies_wide).transform_fold(
    ["US_Gross","Worldwide_Gross"],
    as_=["Gross","dollars"]).mark_bar().encode(
    y = alt.Y('Title:N'),
    x = alt.X('dollars:Q'),
    color=alt.Color("Gross:N")
)

"""Converting long form to wide form?
Using pandas
"""

#3.6 pivot
movies_long.pivot(index="Title",columns="Gross",values="dollars")

"""------------------------------------
*end of lab3 demo*
"""